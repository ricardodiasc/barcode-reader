{"version":3,"sources":["components/BarCodeAppBar.tsx","components/BarcodeCardList.tsx","components/barcode.svg","components/BarcodeStartScanButton.tsx","components/Scanner.tsx","components/BarcodeScanner.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","BarCodeAppBar","classes","AppBar","position","Toolbar","IconButton","edge","color","aria-label","className","Typography","variant","BarcodeCardList","props","Card","elevation","style","marginTop","CardContent","CardHeader","codeScannerd","CardActions","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","fill","_ref3","x","y","width","height","_ref","svgRef","preserveAspectRatio","viewBox","msTransform","WebkitTransform","transform","ref","ForwardRef","forwardRef","BarcodeStartScanButton","Fab","onClick","openScanner","right","bottom","margin","Scanner","scanner","Quagga","config","fromSource","inputStream","useEffect","toPromise","promise","then","onDetected","catch","onCancel","removeEventListener","stop","console","log","defaultConfig","frequency","numOfWorkers","locate","name","type","constraints","deviceId","facingMode","area","top","left","decoder","readers","locator","halfSample","patchSize","BarcodeScanner","useState","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","closeCamera","Dialog","onClose","DialogTitle","id","DialogContent","result","setCodeScanner","DialogActions","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+QAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,QAKD,SAASK,IACtB,IAAMC,EAAUX,IAChB,OACE,kBAACY,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXC,UAAWR,EAAQL,YAEnB,kBAAC,IAAD,OAEF,kBAACc,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWR,EAAQF,OAA5C,0C,qDCzBO,SAASa,EAAgBC,GACtC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMC,UAAW,EAAGC,MAAO,CAAEC,UAAW,SACtC,kBAACC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAYC,QAAQ,SAApB,sCAGJ,kBAACG,EAAA,EAAD,CAAMC,UAAW,EAAGC,MAAO,CAAEC,UAAW,SACtC,kBAACE,EAAA,EAAD,CAAYpB,MAAM,YAClB,kBAACmB,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAYC,QAAQ,SAASE,EAAMO,eAErC,kBAACC,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CAAYE,MAAM,YAAYC,aAAW,WACvC,kBAAC,IAAD,U,oEC7BZ,SAASc,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAIoB,EAAqB,IAAMC,cAAc,OAAQ,CACnDC,EAAG,mGACHC,KAAM,YAGJC,EAAqB,IAAMH,cAAc,OAAQ,CACnDI,EAAG,EACHC,EAAG,EACHC,MAAO,GACPC,OAAQ,GACRL,KAAM,qBAGJ,EAAa,SAAoBM,GACnC,IAAIC,EAASD,EAAKC,OACdxD,EAAQuD,EAAKvD,MACbc,EAAQuB,EAAyBkB,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMR,cAAc,MAAOxB,EAAS,CACtD8B,MAAO,GACPC,OAAQ,GACRG,oBAAqB,gBACrBC,QAAS,YACTzC,MAAO,CACL0C,YAAa,iBACbC,gBAAiB,iBACjBC,UAAW,kBAEbC,IAAKN,GACJ1C,GAAQd,EAAqB,IAAM+C,cAAc,QAAS,KAAM/C,GAAS,KAAM8C,EAAOI,IAGvFa,EAAa,IAAMC,YAAW,SAAUlD,EAAOgD,GACjD,OAAoB,IAAMf,cAAc,EAAYxB,EAAS,CAC3DiC,OAAQM,GACPhD,OClBUmD,GDoBA,ICrCgB,SAACnD,GAC9B,OACE,kBAACoD,EAAA,EAAD,CACE1D,MAAM,YACN2D,QAASrD,EAAMsD,YACfnD,MAAO,CACLb,SAAU,QACViE,MAAO,EACPC,OAAQ,EACRC,OAAQ,kBAGV,kBAAC,EAAD,S,yBCUSC,EAnBC,SAAC1D,GACf,IAAM2D,EAAUC,IAAOC,OAAO7D,EAAM6D,QAAQC,WAA5B,2BACX9D,EAAM6D,OAAOE,aADF,IAEdnD,OAAQ,uBAaV,OAVAoD,qBAAU,WAIR,OAH6BL,EAAQM,YACrBC,QAAQC,KAAKnE,EAAMoE,YAAYC,MAAMrE,EAAMsE,UAEpD,WACLX,EAAQY,oBAAoB,WAAYvE,EAAMoE,YAAYI,OAC1DC,QAAQC,IAAI,iBAEb,CAACf,EAAS3D,EAAMoE,WAAYpE,EAAMsE,WAE9B,yBAAK1E,UAAU,sBCdlB+E,EAAgB,CACpBC,UAAW,EACXC,aAAc,EACdC,QAAQ,EACRf,YAAa,CACXgB,KAAM,OACNC,KAAM,aACNC,YAAa,CACX1C,MAAO,IACPC,OAAQ,IACR0C,SAAU,EACVC,WAAY,eAEdC,KAAM,CACJC,IAAK,KACL9B,MAAO,KACP+B,KAAM,KACN9B,OAAQ,OAGZ+B,QAAS,CACPC,QAAS,CAAC,aAAc,iBAAkB,oBAE5CC,QAAS,CACPC,YAAY,EACZC,UAAW,WAkDAC,EA1CQ,SAAC5F,GAAgC,IAAD,EAC7B6F,oBAAS,GADoB,mBAC9CC,EAD8C,KACxCC,EADwC,KAE/CpH,EAAQqH,cACRC,EAAaC,YAAcvH,EAAMwH,YAAYC,KAAK,OAClDC,EAAc,WAClBN,GAAQ,IAaV,OACE,oCACE,kBAACO,EAAA,EAAD,CAAQR,KAAMA,EAAMS,QAASF,EAAaJ,WAAYA,GACpD,kBAACO,EAAA,EAAD,CAAaC,GAAG,yBAAyB,UACzC,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAAC,EAAD,CACE7C,OAAQc,EACRP,WAfa,SAACuC,GACxB3G,EAAM4G,eAAeD,IAeXrC,SAbK,WACfG,QAAQC,IAAI,qBAgBR,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQpH,MAAM,UAAUI,QAAQ,YAAYuD,QAASgD,GAArD,WAKJ,kBAAC,EAAD,CAAwB/C,YA9BR,WAClByC,GAAQ,QChDNtH,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,QAiBDiI,EAZH,WACV,IAAM3H,EAAUX,IADA,EAEuBoH,mBAAS,IAFhC,mBAETtF,EAFS,KAEKqG,EAFL,KAGhB,OACE,yBAAKhH,UAAWR,EAAQP,MACtB,kBAACM,EAAD,MACA,kBAACY,EAAD,CAAiBQ,aAAcA,IAC/B,kBAAC,EAAD,CAAgBqG,eAAgBA,MCTlBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.90291ae9.chunk.js","sourcesContent":["import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function BarCodeAppBar() {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          SCMP - Leitor de código de barras\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  CardHeader,\n  CardActions,\n  IconButton,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\ninterface BarcodeCardListProps {\n  codeScannerd: string;\n}\nexport default function BarcodeCardList(props: BarcodeCardListProps) {\n  return (\n    <>\n      <Card elevation={2} style={{ marginTop: \"20px\" }}>\n        <CardContent>\n          <Typography variant=\"body1\">Nenhum código foi lido ainda.</Typography>\n        </CardContent>\n      </Card>\n      <Card elevation={2} style={{ marginTop: \"20px\" }}>\n        <CardHeader title=\"B000000\" />\n        <CardContent>\n          <Typography variant=\"body1\">{props.codeScannerd}</Typography>\n        </CardContent>\n        <CardActions>\n          <IconButton color=\"secondary\" aria-label=\"Deletar\">\n            <DeleteIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2 6h2v12H2V6m3 0h1v12H5V6m2 0h3v12H7V6m4 0h1v12h-1V6m3 0h2v12h-2V6m3 0h3v12h-3V6m4 0h1v12h-1V6z\",\n  fill: \"#FFFFFF\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"rect\", {\n  x: 0,\n  y: 0,\n  width: 24,\n  height: 24,\n  fill: \"rgba(0, 0, 0, 0)\"\n});\n\nvar SvgBarcode = function SvgBarcode(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 24 24\",\n    style: {\n      msTransform: \"rotate(360deg)\",\n      WebkitTransform: \"rotate(360deg)\",\n      transform: \"rotate(360deg)\"\n    },\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgBarcode, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/barcode.2183cd00.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { ReactComponent as BarcodeIcon } from \"./barcode.svg\";\n\ninterface IBCProps {\n  openScanner: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}\n\nconst BarcodeStartScanButton = (props: IBCProps) => {\n  return (\n    <Fab\n      color=\"secondary\"\n      onClick={props.openScanner}\n      style={{\n        position: \"fixed\",\n        right: 0,\n        bottom: 0,\n        margin: \"0 1em 1em 1em\",\n      }}\n    >\n      <BarcodeIcon />\n    </Fab>\n  );\n};\n\nexport default BarcodeStartScanButton;\n","import React, { useEffect } from \"react\";\nimport Quagga from \"quagga\";\n\ninterface ScannerProps {\n  onDetected: Function;\n  onCancel: Function;\n  config: {\n    inputStream: any;\n  };\n}\n\nconst Scanner = (props: ScannerProps) => {\n  const scanner = Quagga.config(props.config).fromSource({\n    ...props.config.inputStream,\n    target: \".overlay__content\",\n  });\n\n  useEffect(() => {\n    const scannerPromisse: any = scanner.toPromise();\n    scannerPromisse.promise.then(props.onDetected).catch(props.onCancel);\n\n    return () => {\n      scanner.removeEventListener(\"detected\", props.onDetected).stop();\n      console.log(\"cleanup...\");\n    };\n  }, [scanner, props.onDetected, props.onCancel]);\n\n  return <div className=\"overlay__content\" />;\n};\n\nexport default Scanner;\n","import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  useMediaQuery,\n  DialogContent,\n  DialogActions,\n  Button,\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport BarcodeStartScanButton from \"./BarcodeStartScanButton\";\nimport Scanner from \"./Scanner\";\n\nconst defaultConfig = {\n  frequency: 5,\n  numOfWorkers: 2,\n  locate: true,\n  inputStream: {\n    name: \"Live\",\n    type: \"LiveStream\",\n    constraints: {\n      width: 800,\n      height: 600,\n      deviceId: 0,\n      facingMode: \"environment\",\n    },\n    area: {\n      top: \"0%\",\n      right: \"0%\",\n      left: \"0%\",\n      bottom: \"0%\",\n    },\n  },\n  decoder: {\n    readers: [\"ean_reader\", \"code_39_reader\", \"code_128_reader\"],\n  },\n  locator: {\n    halfSample: true,\n    patchSize: \"medium\",\n  },\n};\n\ninterface BarcodeScannerProps {\n  setCodeScanner: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst BarcodeScanner = (props: BarcodeScannerProps) => {\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const closeCamera = () => {\n    setOpen(false);\n  };\n  const openScanner = () => {\n    setOpen(true);\n  };\n\n  const handleScanResult = (result: any) => {\n    props.setCodeScanner(result);\n  };\n  const stopScan = () => {\n    console.log(\"Stop Scan...\");\n  };\n\n  return (\n    <>\n      <Dialog open={open} onClose={closeCamera} fullScreen={fullScreen}>\n        <DialogTitle id=\"barcode-camera-dialog\">{\"Camera\"}</DialogTitle>\n        <DialogContent>\n          <DialogContent>\n            <Scanner\n              config={defaultConfig}\n              onDetected={handleScanResult}\n              onCancel={stopScan}\n            />\n          </DialogContent>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" variant=\"contained\" onClick={closeCamera}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <BarcodeStartScanButton openScanner={openScanner} />\n    </>\n  );\n};\n\nexport default BarcodeScanner;\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport BarCodeAppBar from \"./BarCodeAppBar\";\nimport BarcodeCardList from \"./BarcodeCardList\";\nimport BarcodeScanner from \"./BarcodeScanner\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst App = () => {\n  const classes = useStyles();\n  const [codeScannerd, setCodeScanner] = useState(\"\");\n  return (\n    <div className={classes.root}>\n      <BarCodeAppBar />\n      <BarcodeCardList codeScannerd={codeScannerd} />\n      <BarcodeScanner setCodeScanner={setCodeScanner} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}